package uniregistrar.driver.did.sov;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.ExecutionException;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;
import org.hyperledger.indy.sdk.IndyException;
import org.hyperledger.indy.sdk.ledger.Ledger;
import org.hyperledger.indy.sdk.pool.Pool;
import org.hyperledger.indy.sdk.wallet.Wallet;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Taa {

	private static Logger log = LoggerFactory.getLogger(Taa.class);

	public static String getTaa(Pool pool, Wallet wallet, String submitterDid) throws InterruptedException, ExecutionException, IndyException {

		String getTxnAuthorAgreementRequest = Ledger.buildGetTxnAuthorAgreementRequest(submitterDid, null).get();
		String getTxnAuthorAgreementResult = Ledger.signAndSubmitRequest(pool, wallet, submitterDid, getTxnAuthorAgreementRequest).get();
		if (log.isDebugEnabled()) log.debug("getTxnAuthorAgreementResult: (" + getTxnAuthorAgreementResult.length() + ") " + getTxnAuthorAgreementResult);

		JSONObject jsonObjectTAA = new JSONObject(getTxnAuthorAgreementResult);
		JSONObject jsonObjectTAAResult = (jsonObjectTAA.has("result") && jsonObjectTAA.get("result") instanceof JSONObject) ? jsonObjectTAA.getJSONObject("result") : null;
		JSONObject jsonObjectTAAResultData = (jsonObjectTAAResult != null && jsonObjectTAAResult.has("data") && jsonObjectTAAResult.get("data") instanceof JSONObject) ? jsonObjectTAAResult.getJSONObject("data") : null;
		String taa = jsonObjectTAAResultData == null ? null : jsonObjectTAAResultData.getString("text");
		if (log.isDebugEnabled() && taa != null) log.debug("taa: (" + taa.length() + ") " + taa);

		return taa;
	}

	private static final String taa;

	static {

		try {

			taa = new String(Base64.decodeBase64(""), "UTF-8");
		} catch (Exception ex) {

			throw new RuntimeException(ex.getMessage(), ex);
		}
	}


	public static String agree(String request, String taa) throws InterruptedException, ExecutionException, IndyException {

		// agree

		String taaVersion = taaVersion();
		String taaDigest = taaDigest(taaVersion + taa);
		String taaMechanism = taaMechanism();

		log.info("taa: " + taa);
		log.info("taaVersion: " + taaVersion);
		log.info("taaDigest: " + taaDigest);
		log.info("taaMechanism: " + taaMechanism);

		String appendTxnAuthorAgreementAcceptanceToNymRequest = Ledger.appendTxnAuthorAgreementAcceptanceToRequest(request, Taa.taa, taaVersion, taaDigest, taaMechanism, System.currentTimeMillis()/1000).get();

		return appendTxnAuthorAgreementAcceptanceToNymRequest;
	}

	static String taaVersion() {

		return "1";
	}

	static String taaDigest(String taa) {

		MessageDigest md;

		try {

			md = MessageDigest.getInstance("SHA-256");
		} catch (NoSuchAlgorithmException ex) {

			throw new RuntimeException(ex.getMessage(), ex);
		}

		byte[] digest = md.digest(taa.getBytes(StandardCharsets.UTF_8));
		String taaDigest = Hex.encodeHexString(digest);
		if (log.isDebugEnabled()) log.debug("taaDigest: " + taaDigest);

		return taaDigest;
	}

	static String taaMechanism() {

		return "for_session";
	}
}
